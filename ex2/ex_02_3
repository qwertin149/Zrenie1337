from __future__ import division
import cv2
import numpy as np
import math

width, height = 900, 900


square = [(math.sqrt(2)/2, 1/3, 1),
          (-math.sqrt(2)/2, 1/3, 1),
          (math.sqrt(2)/2, -2/3, 2),
          (-math.sqrt(2)/2, -2/3, 2)]


def createImg(x, y):
    img = np.ndarray(shape=(x, y, 3), dtype=np.uint8)
    img.fill(200)
    return img


def perspective(point, c, angle):
    x, y, z = point
    f = c / math.tan(math.radians(angle))
    return int(f * (x / z) + c), int(f * (y / z) + c)


def orthograph(point, height, width):
    x, y, z = point
    return int(x * height / 4 + height / 2), int(y * width / 4 + width / 2)


square_perspective = [perspective(point, height / 2, 45) for point in square]
square_ortograph = [orthograph(point, height, width) for point in square]


def draw(img, square):
    cv2.line(img, square[0], square[1], [0, 0, 0])
    cv2.line(img, square[1], square[3], [0, 0, 0])
    cv2.line(img, square[3], square[2], [0, 0, 0])
    cv2.line(img, square[2], square[0], [0, 0, 0])


perspective_result = createImg(height, width)
ortograph_result = perspective_result.copy()


draw(perspective_result, square_perspective)
draw(ortograph_result, square_ortograph)

cv2.imshow('perspective', perspective_result)
cv2.imshow('ortograph', ortograph_result)
cv2.waitKey(0)
